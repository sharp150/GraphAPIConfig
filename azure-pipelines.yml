trigger:
- main

pool:
  vmImage: 'windows-latest'

stages:
- stage: Validate
  jobs:
  - job: Import
    continueOnError: false
    steps:
    - task: CmdLine@2
      name: CloneGraphAPI
      inputs:
        script: 'git clone https://github.com/wesley-trust/GraphAPI.git'
        workingDirectory: '$(System.ArtifactsDirectory)'
    - task: CmdLine@2
      name: CloneToolKit
      inputs:
        script: 'git clone https://github.com/wesley-trust/ToolKit.git'
        workingDirectory: '$(System.ArtifactsDirectory)'
    - task: PowerShell@2
      name: InvokeWTValidateCAPolicy
      inputs:
        targetType: 'inline'
        script: |
          . $(System.ArtifactsDirectory)\GraphAPI\Public\AzureAD\ConditionalAccess\Invoke-WTValidateCAPolicy.ps1
          $ValidateCAPolicies = Invoke-WTValidateCAPolicy `
            -Path $(Build.Repository.LocalPath)\AzureAD\ConditionalAccess

          # Convert to pass objects as encoded string in pipeline variable
          $ValidateCAPolicies = $ValidateCAPolicies | ConvertTo-Json
          $ValidateCAPolicies = [System.Text.Encoding]::Unicode.GetBytes($ValidateCAPolicies)
          $ValidateCAPolicies =[Convert]::ToBase64String($ValidateCAPolicies)

          Write-Host "##vso[task.setvariable variable=ValidateObject;isOutput=true]$ValidateCAPolicies"
        pwsh: true
        workingDirectory: '$(System.ArtifactsDirectory)'
- stage: Plan
  dependsOn: Validate
  variables:
    ValidateCAPolicies: $[ stageDependencies.Validate.Import.outputs['InvokeWTValidateCAPolicy.ValidateObject'] ]
  jobs:
  - job: Evaluate
    steps:
    - task: PowerShell@2
      name: InvokeWTValidateCAPolicy
      inputs:
        targetType: 'inline'
        script: |
          # Decode policies
          $ValidateCAPolicies = "$(ValidateCAPolicies)"
          $ValidateCAPolicies = [System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String($ValidateCAPolicies))
          $ValidateCAPolicies = $ValidateCAPolicies | ConvertFrom-JSON
          $ValidateCAPolicies
        pwsh: true
        workingDirectory: '$(System.ArtifactsDirectory)'